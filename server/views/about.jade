// Author: Damon van der Linde, Student ID: 21506136
extends layout

block head
  title  MatchMaker:About 
  meta(charset='UTF-8')
  link(type='text/css', rel='stylesheet', href='css/about.css')
  link(type='text/css', rel='stylesheet', href='css/layout.css')
  script(type='text/javascript', src='js/script.js')

block content
  #content
    br
    br
    br
    h3 What is MatchMaker about?
    p.contentText
      | At MatchMaker our goal is to provide you with a high qaulity match making services. Whether you are just looking for a freindship or more than that we will provide you with suitable matches given your interest.
    h3 How does the matching work?
    p.contentText
      | We match people based on their interests and things they have in common with you.
      | During the signing up process you specify the distance you want your match to
      | be within. The best matches will be returned. A match is done by firstly making
      | sure it matches your main interest things (age range, gender, range within) then
      | the quality of this match is determined by the number of things they have in common
      | with you.
    h3 References/Resources used
    p.contentText
      img(src='images/ml_original.png', width='200', height='200', alt='Match profile Image')
      br
      | 					Matchmaking Image. (2010). [image] Available at: http://vignette4.wikia.nocookie.net/halomachinima/images/3/3e/Matchmaking_Logo.png/revision/latest?cb=20130601174828 [Accessed 30 Mar. 2017]. 
      br
      br
      img(src='images/Faces.jpg', width='300', height='200', alt='Faces Image')
      br
      | 					Black and White Faces Image. (2017). [image] Available at: http://i.amz.mshcdn.com/nJwvOXPBYSfTT9O_c09NTbe9A3M=/950x534/filters:quality(90)/2012%2F12%2F04%2F50%2Fappturnsonl.cII.jpg [Accessed 3 Apr. 2017].
      br
      br
    h3 Underlying architecture:
    p.contentText
      | The underlying architecture is based on the MEAN stack. All the underlying components are written in the same language which allows the whole application to be javascript based. The project required us to utilise the mean stack which itself is a lightweight and self contained while requiring minimal configuration. However if required it is can still be configured in quite a lot of detail. We utilise Mongo as the backend database which is used to store the users’ information. Mongo itself is a document database that is fast, scalable and everything’s JSON. Since schemas are not enforced in Mongo, Mongoose is an object relational modelling tool that Node provides. Node is the runtime environment.  Express is used as the underlying framework which handles the routing and session support. 
    p.contentText
      | The project was written in an MVC style, meaning all the logic was seperated into models, views and controllers. Models are the objects that define the databse's schemas and are interpreted and enforced by mongoose. The views refers to the jade templates which allow html pages to be dynamically created by the server. Finally the controllers are assigned to different routes and implement the logic that interacts with the models and then passes that data back to the view.

    h3 Database design:
    p.contentText
      | The database consists of various tables/documents which contains the user information in a structured way. The messaging document contains the details of the user to which the message was sent and from which user the message came from. It also contains the date of when the message was sent alongside whether or not the message has been read or not. Finally it also stores the actual content of the message. The profile document contains the username which has to be unique alongside the person’s first name, middle name, last name, short bio, their interests, their age, gender, location described as in coordinate format. The user document contains the username, their password and their email. 
    h3 Problems encountered:
    p.contentText
      | During the development of backend of the website, there were a couple of difficulties that were experienced. Firstly the matching algorithm used a distance within parameter which means that it was required to calculate the distance of all the other potential matches to that person and see if they meet the specified threshold. We opted to use the Google maps api to calculated that distance. The second major problem we encounter was uploading and storing profile images. Unfortunately due to the time constraints of the project we were unable to find a working solution. 
    h3 Testing and Validation:
    p.contentText
      | Our testing procedure involved us frequently running through the entire user experience as we built the app. This means we created many accounts with different details and location values, we sent messages between users, edited profiles and found matches. This procedure allowed us to identify bugs in the app and see any flaws in the user experience. By putting ourselves in the user's place we were able to organically improve the design of the app as shortcomings became apparent to us through our use of the app.
    br
  